%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2380 1635
%%HiResBoundingBox: 0 0 2379.1199 1634.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2379.1199 1634.88 re
W
q
[0.24 0 0 -0.24 0 1634.88] cm
q
0 0 9909.375 6809.375 re
W*
q
[74.40947 0 0 74.409241 3079.9409 126.592339] cm
23.940001 38.404999 m
24.02 38.785 24.01 39.18 23.903 39.559998 c
23.808001 39.913998 23.615 40.246998 23.353001 40.526997 c
22.465 41.425995 21.012001 41.446995 20.105001 40.571995 c
15.605001 36.182995 l
14.739001 37.242996 l
19.240002 41.637997 l
20.469002 42.831997 23.139002 42.753998 24.345001 41.529995 c
24.765001 41.102997 25.355001 40.133995 25.481001 39.570995 c
37.342003 39.580994 l
38.620003 39.580994 39.883003 40.772995 39.883003 42.042992 c
39.883003 43.32999 39.047005 44.901993 37.289001 44.901993 c
18.284 44.901993 l
17.462 44.871994 16.437 44.451992 15.719 43.846992 c
5.792 36.393993 l
0.011 36.418995 l
0 27.766001 l
0.05 27.766001 l
0.05 27.688002 l
11.582 27.688002 l
11.582 27.688002 12.79 27.715002 13.622 28.198002 c
14.388 28.645002 15.069 29.301003 15.069 29.301003 c
23.299999 37.294003 l
23.613001 37.595001 23.833 37.977001 23.940001 38.404999 c
h
f
46.036999 25.761 m
46.115997 25.612 46.216999 25.470999 46.275997 25.306 c
46.666996 24.256001 46.615997 23.107 46.130997 22.07 c
45.694996 21.143 44.930996 20.378 43.995998 19.916 c
44.100998 18.014 42.882 16.199001 40.896999 15.505001 c
39.972 15.185001 38.966999 15.155001 38.042999 15.400002 c
37.491001 14.638001 36.700001 14.048001 35.764 13.723001 c
35.243 13.540002 34.702999 13.451001 34.155998 13.451001 c
32.356998 13.451001 30.736998 14.461001 30.026999 16.003002 c
28.162998 16.045002 26.507999 17.168003 25.889999 18.819002 c
25.716999 19.282001 25.630999 19.764002 25.628 20.247002 c
23.946001 20.436001 22.493999 21.509001 21.924 23.038002 c
21.589001 23.931002 21.594 24.883001 21.879 25.763002 c
17.280001 25.763002 l
27.028999 36.970001 l
41.063 36.970001 l
50.389999 25.763 l
46.036999 25.763 l
46.036999 25.761 l
h
23.976 23.802 m
24.346001 22.813 25.546999 22.218 26.714001 22.462999 c
28.691 22.878 l
27.958 20.995001 l
27.777 20.528 27.77 20.043001 27.941999 19.588001 c
28.300999 18.618002 29.438 18.013 30.609999 18.234001 c
31.673998 18.424002 l
31.876997 17.360003 l
31.898996 17.253002 31.924997 17.145002 31.963997 17.043003 c
32.371998 15.950003 33.796997 15.355003 35.046997 15.793003 c
35.741997 16.033003 36.284996 16.535004 36.531998 17.168003 c
36.987 18.317003 l
38.074001 17.727003 l
38.696003 17.392004 39.477001 17.330004 40.178001 17.575003 c
41.393002 17.995003 42.073002 19.189003 41.717003 20.289003 c
41.358002 21.398003 l
42.493 21.683002 l
42.562 21.701002 42.632999 21.718002 42.713001 21.748003 c
43.358002 21.970003 43.877003 22.428003 44.152 23.003002 c
44.381001 23.497002 44.407001 24.047003 44.221001 24.542002 c
44.012001 25.109001 43.541 25.542002 42.922001 25.762001 c
24.316999 25.762001 l
23.870001 25.186001 23.732 24.457001 23.976 23.802 c
h
f
28.450001 6.617 1.185999 6.838 re
f
31.969 1.898 1.185999 9.078 re
f
35.487999 5.817 1.187 5.798 re
f
Q
q
[35.097225 0 0 35.097115 239.74313 3697.1089] cm
40.720001 41 m
36.920002 44.080002 33.240002 45.16 29.52 45.16 c
21.76 45.16 14 40.439999 5.200001 40.080002 c
0.800001 40.080002 l
0.800001 39.800003 l
2.760001 39.800003 3.520001 39.760002 3.520001 37.920002 c
3.520001 16.960003 l
3.520001 15.120003 2.760001 15.080003 0.800001 15.080003 c
0.800001 14.800003 l
7.920001 14.800003 l
7.920001 15.080003 l
6.000001 15.080003 5.200001 15.120003 5.200001 16.960003 c
5.200001 37.840004 l
5.200001 39.400005 5.760001 39.680004 7.120001 39.800003 c
7.320001 39.840004 7.520001 39.840004 7.720001 39.840004 c
7.800001 39.880005 7.840001 39.880005 7.920001 39.880005 c
7.840001 39.880005 l
15.640001 40.520004 23 43.640003 30.16 43.640003 c
33.68 43.640003 37.119999 42.880005 40.559998 40.760002 c
40.720001 41 l
h
21.909 37.880001 m
21.909 39.720001 22.709 39.760002 24.669001 39.760002 c
24.669001 40.040001 l
17.509001 40.040001 l
17.509001 39.760002 l
19.469002 39.760002 20.269001 39.720001 20.269001 37.880001 c
20.269001 16.920002 l
20.269001 15.080002 19.469002 15.040002 17.509001 15.040002 c
17.509001 14.760002 l
24.669001 14.760002 l
24.669001 15.040002 l
22.709 15.040002 21.909 15.080002 21.909 16.920002 c
21.909 37.880001 l
h
48.818001 39.16 m
52.538002 43.32 56.737999 46.200001 62.057999 46.200001 c
62.057999 46.400002 l
45.977997 46.400002 39.657997 27.360001 30.217999 16.520002 c
30.217999 37.920002 l
30.217999 39.760002 31.657999 39.760002 32.977997 39.760002 c
32.977997 40.080002 l
26.977997 40.080002 l
26.977997 39.760002 l
28.257998 39.760002 29.697996 39.760002 29.697996 37.920002 c
29.697996 15.880001 l
26.057997 11.880001 21.977997 9.120001 16.657997 9.120001 c
16.657997 8.920001 l
32.177998 8.920001 38.857998 27.639999 48.257996 38.560001 c
48.257996 16.960001 l
48.257996 15.120001 46.817997 15.080001 45.497997 15.080001 c
45.497997 14.800001 l
51.577995 14.800001 l
51.577995 15.080001 l
50.257996 15.080001 48.817997 15.120001 48.817997 16.960001 c
48.817997 39.160004 l
48.818001 39.16 l
h
58.367001 36.599998 m
57.126999 39.519997 57.927002 39.759998 60.287003 39.759998 c
60.287003 40.039997 l
53.647003 40.039997 l
53.647003 39.759998 l
55.767002 39.759998 56.327003 39.759998 57.367004 37.399998 c
67.567001 14.279997 l
67.766998 14.279997 l
78.006996 37.32 l
79.046997 39.400002 79.326996 39.759998 81.526993 39.759998 c
81.526993 40.039997 l
75.006996 40.039997 l
75.006996 39.759998 l
77.326996 39.759998 77.326996 39.48 75.846992 36.119999 c
73.006989 29.799999 l
61.366989 29.799999 l
58.367001 36.599998 l
h
67.167 16.68 m
61.567001 29.280001 l
72.806999 29.280001 l
67.167 16.68 l
h
102.676003 33.119999 m
102.676003 38.079998 98.396004 40.599998 93.716003 40.599998 c
91.436005 40.599998 89.076004 40.039997 87.076004 38.84 c
87.116005 38.880001 l
85.916008 38.16 85.116005 37.799999 84.556007 37.799999 c
83.796005 37.799999 83.556007 38.52 83.35601 40.040001 c
83.116013 40.040001 l
83.116013 31.720001 l
83.35601 31.720001 l
84.35601 37.360001 89.076012 40.040001 93.436012 40.040001 c
97.35601 40.040001 100.956009 37.799999 100.956009 33.52 c
100.956009 29.560001 97.35601 28.24 93.516006 27.120001 c
91.99601 26.640001 l
88.156006 25.52 84.556007 24.200001 84.556007 20.240002 c
84.556007 16.200001 88.35601 14.280002 92.436005 14.280002 c
93.956001 14.280002 95.516006 14.560001 96.916008 15.080002 c
98.31601 15.560001 99.156006 15.960002 99.67601 15.960002 c
100.156013 15.960002 100.396011 15.640002 100.596008 14.800002 c
100.796005 14.800002 l
100.796005 21.600002 l
100.596008 21.600002 l
100.076012 16.800003 96.156006 14.760002 92.476006 14.760002 c
88.916008 14.760002 85.596008 16.600002 85.596008 19.640003 c
85.596008 27.200003 102.67601 23.480003 102.67601 33.120003 c
102.676003 33.119999 l
h
121.385002 11.2 m
101.385002 11.2 102.705002 34.079998 115.385002 36.240002 c
115.385002 36.52 l
100.665001 35.52 98.625 10.76 121.385002 10.76 c
130.705002 10.76 137.104996 12 142.865005 12 c
147.465012 12 151.665009 11.2 156.705002 8.36 c
156.865005 8.599999 l
152.105011 12.24 147.505005 13.32 142.785004 13.32 c
136.105011 13.32 129.225006 11.2 121.385002 11.2 c
h
120.544998 37.48 m
120.544998 39.279999 121.345001 39.799999 123.305 39.799999 c
123.305 40.079998 l
116.145004 40.079998 l
116.145004 39.799999 l
118.105003 39.799999 118.905006 39.279999 118.905006 37.48 c
118.905006 16.959999 l
118.905006 15.119999 118.105003 15.079999 116.145004 15.079999 c
116.145004 14.799999 l
120.545006 14.799999 l
120.545006 26.52 l
126.465004 26.52 l
128.305008 26.52 128.824997 26.08 129.145004 24.720001 c
129.345001 24.720001 l
129.345001 28.800001 l
129.145004 28.800001 l
128.824997 27.400002 128.305008 27.000002 126.465004 27.000002 c
120.545006 27.000002 l
120.545006 37.480003 l
120.544998 37.48 l
h
145.173996 14.24 m
162.093994 14.24 162.093994 40.599998 145.173996 40.599998 c
128.213989 40.599998 128.213989 14.239998 145.173996 14.239998 c
145.173996 14.24 l
h
144.334 15.04 m
129.294006 15.04 130.973999 39.799999 145.973999 39.799999 c
160.973999 39.799999 159.414001 15.039999 144.334 15.039999 c
144.334 15.04 l
h
172.203 14.24 m
189.123 14.24 189.123 40.599998 172.203 40.599998 c
155.243011 40.599998 155.243011 14.239998 172.203 14.239998 c
172.203 14.24 l
h
171.36301 15.04 m
156.323013 15.04 158.003006 39.799999 173.00301 39.799999 c
188.00301 39.799999 186.44301 15.039999 171.36301 15.039999 c
171.36301 15.04 l
h
199.15199 14.76 m
215.87199 14.76 215.87199 40.040001 199.15199 40.040001 c
187.71199 40.040001 l
187.71199 39.760002 l
189.672 39.760002 190.47198 39.240002 190.47198 37.440002 c
190.47198 17.360003 l
190.47198 15.560002 189.67198 15.040003 187.71199 15.040003 c
187.71199 14.760003 l
199.15199 14.760003 l
199.15199 14.76 l
h
192.112 37.360001 m
192.112 39.16 192.87199 39.600002 194.832 39.600002 c
199.15201 39.600002 l
213.43201 39.600002 213.47202 15.200003 199.15201 15.200003 c
192.11201 15.200003 l
192.11201 37.360001 l
192.112 37.360001 l
h
219.701 37.880001 m
219.701 39.720001 220.50101 39.760002 222.461 39.760002 c
222.461 40.040001 l
215.30099 40.040001 l
215.30099 39.760002 l
217.261 39.760002 218.06099 39.720001 218.06099 37.880001 c
218.06099 16.920002 l
218.06099 15.080002 217.26099 15.040002 215.30099 15.040002 c
215.30099 14.760002 l
222.461 14.760002 l
222.461 15.040002 l
220.50099 15.040002 219.701 15.080002 219.701 16.920002 c
219.701 37.880001 l
h
246.41 34 m
246.73001 34.040001 l
244.97002 40.040001 l
225.25002 40.040001 l
225.25002 39.760002 l
227.21002 39.760002 228.01001 39.720001 228.01001 37.880001 c
228.01001 16.920002 l
228.01001 15.080002 227.21001 15.040002 225.25002 15.040002 c
225.25002 14.760002 l
243.61002 14.760002 l
245.37001 20.760002 l
245.05 20.840002 l
243.33 15.320002 243.01001 15.200003 239.37001 15.200003 c
229.65001 15.200003 l
229.65001 26.480003 l
235.57001 26.480003 l
237.41 26.480003 237.93001 26.080004 238.25 24.680004 c
238.45 24.680004 l
238.45 28.760004 l
238.25 28.760004 l
237.92999 27.360004 237.41 26.960005 235.57001 26.960005 c
229.65001 26.960005 l
229.65001 37.800003 l
229.65001 39.400002 230.25002 39.560001 231.69 39.600002 c
240.73 39.600002 l
244.73 39.600002 244.69 39.280003 246.40999 34.000004 c
246.41 34 l
h
267.879 33.119999 m
267.879 38.079998 263.599 40.599998 258.91901 40.599998 c
256.63901 40.599998 254.27901 40.039997 252.27901 38.84 c
252.319 38.880001 l
251.119 38.16 250.319 37.799999 249.759 37.799999 c
248.99901 37.799999 248.759 38.52 248.55901 40.040001 c
248.319 40.040001 l
248.319 31.720001 l
248.55901 31.720001 l
249.55901 37.360001 254.27901 40.040001 258.63901 40.040001 c
262.55902 40.040001 266.159 37.799999 266.159 33.52 c
266.159 29.560001 262.55899 28.24 258.71899 27.120001 c
257.19901 26.640001 l
253.35901 25.52 249.759 24.200001 249.759 20.240002 c
249.759 16.200001 253.55901 14.280002 257.63901 14.280002 c
259.159 14.280002 260.71899 14.560001 262.11902 15.080002 c
263.51901 15.560001 264.35901 15.960002 264.87903 15.960002 c
265.35904 15.960002 265.59903 15.640002 265.79904 14.800002 c
265.99905 14.800002 l
265.99905 21.600002 l
265.79904 21.600002 l
265.27905 16.800003 261.35904 14.760002 257.67905 14.760002 c
254.11905 14.760002 250.79904 16.600002 250.79904 19.640003 c
250.79904 27.200003 267.87903 23.480003 267.87903 33.120003 c
267.879 33.119999 l
h
f
Q
q
[38.295303 0 0 38.295185 1154.64453 5637.7876] cm
1.32 20 m
1.32 6 l
5.46 6 l
9.38 6 12.58 9.12 12.58 12.98 c
12.58 16.860001 9.38 20 5.46 20 c
1.32 20 l
1.32 20 l
h
3.46 19.379999 m
5.46 19.379999 l
8.04 19.379999 10.18 16.5 10.18 12.98 c
10.18 9.459999 8.04 6.619999 5.460001 6.619999 c
3.460001 6.619999 l
3.460001 19.379999 l
3.46 19.379999 l
h
4.78 22.139999 m
5.28 21.959999 l
5.66 21.82 5.94 21.539999 6.08 21.16 c
6.24 20.66 l
6.4 21.16 l
6.54 21.539999 6.84 21.82 7.22 21.959999 c
7.72 22.139999 l
7.22 22.279999 l
6.84 22.379999 6.52 22.739998 6.4 23.099998 c
6.24 23.599998 l
6.08 23.099998 l
5.96 22.739998 5.66 22.379999 5.28 22.279999 c
4.78 22.139999 l
h
17.959999 20 m
17.959999 6 l
26.699999 6 l
26.699999 6.92 l
20.079998 6.92 l
20.079998 12.68 l
23.039997 12.68 l
23.039997 13.64 l
20.079998 13.64 l
20.079998 19.060001 l
26.699997 19.060001 l
26.699997 20.000002 l
17.959997 20.000002 l
17.959999 20 l
h
31.5 20 m
31.5 6 l
33.639999 6 l
33.639999 19.060001 l
40.279999 19.060001 l
40.279999 20.000002 l
31.5 20.000002 l
31.5 20 l
h
38.139999 17.16 m
38.139999 6 l
40.279999 6 l
40.279999 17.16 l
38.139999 17.16 l
h
57.220001 16.18 m
58.84 16.18 l
57.68 18.460001 55.260002 20.060001 52.52 20.060001 c
48.580002 20.060001 45.380001 16.880001 45.380001 12.960001 c
45.380001 9.040001 48.580002 5.940001 52.52 5.940001 c
55.240002 5.940001 57.599998 7.460001 58.779999 9.700001 c
56.039997 9.700001 l
54.879997 7.880001 53.139996 6.740001 51.459999 6.740001 c
49.119999 6.740001 47.82 8.76 47.82 11.34 c
47.82 15.64 50.799999 19.360001 53.580002 19.360001 c
55.380001 19.360001 56.660004 17.900002 57.220001 16.18 c
h
64.080002 20 m
64.080002 6 l
66.220001 6 l
66.220001 20 l
64.080002 20 l
h
71.639999 12.96 m
71.639999 9.04 74.839996 5.94 78.760002 5.94 c
82.700005 5.94 85.900002 9.04 85.900002 12.96 c
85.900002 16.880001 82.700005 20.059999 78.760002 20.059999 c
74.840004 20.059999 71.639999 16.879999 71.639999 12.959999 c
71.639999 12.96 l
h
79.82 19.360001 m
82.339996 19.360001 83.699997 16.720001 83.699997 14.300001 c
83.699997 10.020001 80.539993 6.720001 77.719994 6.720001 c
75.339996 6.720001 74.05999 8.740002 74.05999 11.320002 c
74.05999 15.600002 76.999992 19.360001 79.819992 19.360001 c
79.82 19.360001 l
h
91.080002 12.96 m
91.080002 6 l
93.220001 6 l
93.220001 12.940001 l
93.220001 16.42 95.239998 18.220001 97.82 18.220001 c
100.400002 18.220001 102.279999 16.420002 102.279999 12.940001 c
102.279999 6.000001 l
103.159996 6.000001 l
103.159996 12.940001 l
103.159996 17.060001 101.239998 20.060001 97.099998 20.060001 c
93.080002 20.060001 91.080002 16.960001 91.080002 12.960001 c
91.080002 12.96 l
h
108.279999 18.74 m
108.639999 17.860001 l
109.400002 18.140001 111.400002 18.800001 113.220001 18.800001 c
114.739998 18.800001 116.200005 18.140001 116.200005 17.160002 c
116.200005 15.720001 113.120003 14.060001 112.020004 13.380002 c
110.620003 12.520002 108.500008 11.220002 108.500008 9.440002 c
108.500008 6.260002 111.94001 5.940002 113.060005 5.940002 c
114.220009 5.940002 115.380005 6.160002 116.620003 6.640002 c
116.420006 7.300002 l
115.680008 6.980002 114.480003 6.560002 113.320007 6.560002 c
112.280006 6.560002 110.380005 7.180002 110.380005 8.460003 c
110.400002 9.800003 113.240005 10.980003 116.120003 12.960003 c
117.880005 14.180003 118.700005 15.640003 118.700005 16.900003 c
118.700005 18.660004 117.060005 20.060003 114.280006 20.060003 c
110.800003 20.060003 108.440002 18.820004 108.280006 18.740004 c
108.279999 18.74 l
h
136.320007 22.139999 m
136.820007 21.959999 l
137.200012 21.82 137.480011 21.539999 137.62001 21.16 c
137.780014 20.66 l
137.940018 21.16 l
138.080017 21.539999 138.38002 21.82 138.760025 21.959999 c
139.260025 22.139999 l
138.760025 22.279999 l
138.38002 22.379999 138.060028 22.739998 137.940018 23.099998 c
137.780014 23.599998 l
137.62001 23.099998 l
137.500015 22.739998 137.200012 22.379999 136.820007 22.279999 c
136.320007 22.139999 l
h
132.759995 20 m
132.759995 6 l
138.580002 6 l
140.540009 6 142.100006 7.58 142.100006 9.5 c
142.100006 10.76 141.400009 11.92 140.420013 12.48 c
142.12001 12.86 143.38002 14.36 143.38002 16.16 c
143.38002 18.26 141.700027 20 139.560013 20 c
132.76001 20 l
132.759995 20 l
h
134.919998 19.299999 m
138.380005 19.299999 l
140.160004 19.299999 141.520004 17.9 141.520004 16.16 c
141.520004 14.46 140.100006 13.04 138.380005 13.04 c
134.919998 13.04 l
134.919998 19.299999 l
h
134.919998 12.38 m
138.039993 12.38 l
139.479996 12.38 140.779999 11.06 140.779999 9.5 c
140.779999 7.9 139.5 6.62 137.940002 6.62 c
134.919998 6.62 l
134.919998 12.38 l
h
148.779999 20 m
148.779999 6 l
150.919998 6 l
150.919998 20 l
148.779999 20 l
h
161.160004 20 m
161.160004 6.92 l
155.779999 6.92 l
155.779999 6 l
168.67999 6 l
168.67999 6.92 l
163.279999 6.92 l
163.279999 20 l
161.160004 20 l
h
173.52 20 m
173.52 6 l
182.26001 6 l
182.26001 6.92 l
175.64001 6.92 l
175.64001 12.68 l
178.60002 12.68 l
178.60002 13.64 l
175.64001 13.64 l
175.64001 19.060001 l
182.26001 19.060001 l
182.26001 20.000002 l
173.52 20.000002 l
173.52 20 l
h
186.72 18.74 m
187.08 17.860001 l
187.84 18.140001 189.84 18.800001 191.66 18.800001 c
193.18001 18.800001 194.64 18.140001 194.64 17.160002 c
194.64 15.720001 191.56 14.060001 190.46001 13.380002 c
189.06001 12.520002 186.94 11.220002 186.94 9.440002 c
186.94 6.260002 190.38 5.940002 191.5 5.940002 c
192.66 5.940002 193.82001 6.160002 195.06 6.640002 c
194.86 7.300002 l
194.12 6.980002 192.92 6.560002 191.75999 6.560002 c
190.72 6.560002 188.81999 7.180002 188.81999 8.460003 c
188.84 9.800003 191.67999 10.980003 194.56 12.960003 c
196.31999 14.180003 197.14 15.640003 197.14 16.900003 c
197.14 18.660004 195.5 20.060003 192.72 20.060003 c
189.24001 20.060003 186.88 18.820004 186.72 18.740004 c
186.72 18.74 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
